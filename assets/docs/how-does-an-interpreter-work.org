#+TITLE: How does an interpreter work?
#+AUTHOR: Jason Hemann
#+OPTIONS: toc:nil        


* Walking through an interpreter evaluation

So, it sometimes helps to step through a non-trivial example of the
evaluation of a program in order to understand how an environment
dynamically develops during the evaluation. So, we take as our running
example the following program:

#+BEGIN_SRC racket
((lambda (i)
   ((lambda (j)
      ((lambda (j)
     i)
       5))
    6))
 7)
#+END_SRC

We'll want to step through the execution of this program. So first
we'll acquaint ourselves with this program and what it actually does.

At the top level, what we have here is an application. It's the
application of the operator expression src_racket{(lambda (i) ((lambda
(j) ((lambda (j) i) 5)) 6))} to the operand src_racket{7}. In an
application form, we call the first expression the
[ope*rator*](https://www.youtube.com/watch?v=3RA4MykPm4s) and the
second expression the ope*rand*. The operator is a lambda expression:
If I were unsure of that, we could write a program over our λ-calculus
datatype ~primary-form~

#+BEGIN_SRC racket
(define (primary-form expr)
  (match expr
    [`,y #:when (symbol? y) 'variable]
    [`(lambda (,x) ,body) 'lambda]
    [`(,rator ,rand) 'application]))
#+END_SRC

You can use this to verify the program for yourself. The body of that
λ expression is also an application.

#+BEGIN_SRC racket
((lambda (j)
   ((lambda (j)
      i) ;; this will be the point we discuss most.
    5))
 6)
#+END_SRC


Notice several things: Firstly, that this is again an application of
again a λ whose body is *also* an application, yadda yadda. Secondly,
notice that when we get down to the ultimate value of this whole big
expression is going to come from the value of ~i~. Thirdly, notice
that ~i~ is a free variable reference in src_racket{((lambda (j)
((lambda (j) i) 5)) 6)}. This latter fact should not be surprising. If
src_racket{x} occurs in the _scope_ of an expression, such as in
src_racket{(lambda (x) (lambda (y) x))}, then that is a bound
reference to x since the variable declaration of ~x~ in the λ
expression is the referent of that bound variable reference.

Then, if we restrict our focus to the body of that same expression,
src_racket{(lambda (y) x)}, then there must be a free variable
reference to ~x~ in the body. Since that outer ~(lambda (x) ...)~ is
what's going to *do* the binding of that free variable.

Okay. So. We perform evaluation of our programs via structural
recursion, the same as we do most any other functions. Which means the
place where we actually *want* to get the value of a variable is when
we work our way down to the variable line; for the program above, when
we have worked our way all the way down to ~i~. Well, that's too late
to figure out the value all by itself, because we no longer have the
information we need to determine what ~i~ means. Our solution to this
problem is that we should accumulate that information as we recur into
the expression, and we can "look up" the meaning of bound variables in
our accumulator when we reach a variable case where we need to know
that information.

Since there are potentially scads and scads of bound variables in an
expression, we'll need to track each one differently. So that when we
see ~i~, we know to look up ~i~ and not ~x~. Secondly, we need to
track not just the name of the variable, but also it's meaning. Our
accumulator must then track two pieces for each variable: the name (or
the "formal parameter" of the λ-expression) and the value (or the
"actual parameter": the number, boolean, or what have you) to which
the formal parameter corresponds in this context.

We'll be walking through that. At what place in the evaluation do we
finally have both of these pieces. Let's look to the application line.


#+begin_src racket
  (match expr
    ...
    [`(,rator ,rand) ((valof rator env) (valof rand env))])
#+end_src

The ~rator~ has to evaluate to a Racket procedure, since we're about
to call it like a procedure of one argument. We're going to call that
procedure on the value of the rand. ~rator~ and ~rand~ can both be big
honkin' expressions, but ultimately when we finally, finnally get down
to values for them, and pass the results back up the recursion, the
value of the rator darn well better be a procedure, and well the value
of the rand can be any old value. So it's only after we finish
evaluating the two sub-pieces of the ~rator~/~rand~ form, and then
*do* the Racket application, that in the λ line we have both the
formal and actual parameters at the same time.

As a simpler example of something like our interpreter, see this one.

#+begin_src racket
((lambda (b) (if b 5 6)) (not false))
#+end_src

We have to first evaluate the operator and operand to values, the
former being a Racket procedure and the latter being a Racket boolean,
and then call the Racket procedure on the Racket boolean, only after
we do that can we finally evaluate the body ~(if b 5 6)~. That's what
our interpreter does, and this is an important point. We never
evaluate the body of a λ expression until after we have applied it to
a value.

#+BEGIN_SRC racket
  (define loop
    (λ (x)
      (loop x)))
#+END_SRC

The reason you can get by with writing down a definition like ~loop~
is that we do not evaluate the body of the expression unless and until
we invoke it with an argument.

It's on the λ line that we actually extend our environment. The RHS of
the lambda line is

#+BEGIN_SRC racket
  (λ (a)
    (valof body (λ (y)
		  (if (eqv? x y) a
		      (env y)))))
  
#+END_SRC
That's the function we invoke with ~true~ or ~7~ or whatever, in our
example. And it's not until we invoke that function that we begin to
evaluate the body. As soon as we recur in to evaluate the body, we
will no longer have access to the surrounding ~(lambda (x) ...)~,
because that was the point of recurring down into the smaller
expression. In order to keep that information with us as we go, we add
it to our accumulator, called an _environment_. We're using a
functional accumulator; we can just as well look at our interpreter as
a mathematical description of the particular function from variables
to values. What we do here in this step, adding to the accumulator, is
also called *extending* the function. If you think of a function as a
set of pairs, we've added one more pair the mapping of ~(x,a)~. Notice
also that if there were already a mapping from x, we'll have locally
"over-written" it; we call this behavior _shadowing_, and the function
extension in the lambda line shows how we implement that shadowing.

So to evaluate this big expression,


#+BEGIN_SRC racket
((lambda (i)
   ((lambda (j)
      ((lambda (j)
     i)
       5))
    6))
 7)
#+END_SRC

we evaluate the two sub-pieces, the rator evaluates to a procedure,
and the rand evaluates to 7. When we do the invocation, we start to
evaluate the body

#+BEGIN_SRC racket
  ((lambda (j)
     ((lambda (j)
	i)
      5))
   6)
#+END_SRC

keeping track of the association that i should mean 7. Our
environment, if we wrote it out by hand, would look now like

#+begin_src racket
  (λ (y) (if (eqv? y 'i)
	     7
	     ((λ (y) <bomb>)
	      y)))
#+end_src

So we evaluate that body in this environment. So in that same fashion
we have to evaluate the two sub-pieces, produce the procedure and the
value 6, and then do the application to then evaluate the body,

#+BEGIN_SRC racket
  ((lambda (j)
     i)
   5)
#+END_SRC

with one additional binding, j to 6. Our
environment, if we wrote it out by hand, would look now like

#+begin_src racket
  (λ (y) (if (eqv? y 'j)
	     6
	     ((λ (y) (if (eqv? y 'i)
			 7
			 ((λ (y) <bomb>)
			  y)))
	      y)))
#+end_src

Each time we extend the environment, we wrap the old one with an if
statement that first checks for the variable we just added, and
otherwise recurs to the just-ever-so-slightly-smaller environment.

Doing the same again---evaluate the two sub-pieces, do the
Racket-application, and evaluate the body within the extended
environment (aka evaluate ~i~ in the following)

#+begin_src racket
  (λ (y) (if (eqv? y 'j)
	    5
	     ((λ (y) (if (eqv? y 'j)
			 6
			 ((λ (y) (if (eqv? y 'i)
				     7
				     ((λ (y) <bomb>)
				      y)))
			  y)))
	      y)))
#+end_src

Notice two things here. 1, as we focus in more tightly on a
sub-expression of a sub-expression of a sub-expression, our
environment has grown larger and larger. There's an inverse
relationship between how tightly focused we are on a sub-expression
and how much of a nested function is our environment.

Secondly, notice that the innermost binding for ~j~ in our original
expression, 5, has now "blocked out" the ability to look up the other
meaning of ~j~. This is our implementation of shadowing. Because we
accumulate these bindings with the most recent one in front, we can
use the recursion into the program's structure to get the shadowing
behavior right.

When we finally go and look up ~i~ at the very last step, we check
that it's not j, we check that it's not j (Again! Twice! We didn't
claim this was the most efficient implementation, just that it
describes mathematically the behavior) and then finally we check if 'i
is 'i. Since it is, we return 
